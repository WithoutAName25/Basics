name: Basics CI

on:
  push:
    branches: [ master ]
  pull_request:

jobs:
  scanModules:
    name: Scan for modules to build
    runs-on: ubuntu-latest
    outputs:
      modulesJson: ${{ steps.modules.outputs.modulesJson }}
    steps:
      - uses: actions/checkout@v4
      - name: Scan modules
        id: modules
        # grep includes from settings.gradle.kts; get parameter of include("..."); format to json array
        run: echo "::set-output name=modulesJson::[\"$(grep -E "^include\(\".+\"\)" settings.gradle.kts | cut -d "\"" -f 2 | sed "N; s/\n/\",\"/")\"]"
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: scanModules
    strategy:
      matrix:
        module: ${{ fromJson(needs.scanModules.outputs.modulesJson) }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@b231772637bb498f11fdbc86052b6e8a8dc9fc92
      - name: Test with Gradle
        run: ./gradlew --no-daemon :${{ matrix.module }}:build
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./${{ matrix.module }}/build/reports/jacoco/test/jacocoTestReport.xml
          flags: unittests,${{ matrix.module }}
  draftRelease:
    name: Create a draft release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@b231772637bb498f11fdbc86052b6e8a8dc9fc92
      - name: Export Properties
        id: properties
        run: |
          PROPERTIES="$(./gradlew --no-daemon properties --console=plain -q)"
          VERSION="$(echo "$PROPERTIES" | grep "^versionString:" | cut -f2- -d ' ')"
          echo "Current version: $VERSION"
          echo "::set-output name=version::$VERSION"
      - uses: release-drafter/release-drafter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ format('v{0}', steps.properties.outputs.version) }}
          tag: ${{ format('v{0}', steps.properties.outputs.version) }}
          prerelease: ${{ contains(steps.properties.outputs.version, 'alpha') || contains(steps.properties.outputs.version, 'beta') }}
